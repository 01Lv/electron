export const chrome = {
  runtime: {
    getManifest: 'CHROME_EXTENSION_MANIFEST',
    connect: 'CHROME_RUNTIME_CONNECT',
    sendMessage: 'CHROME_RUNTIME_SENDMESSAGE'
  }
}

export const clipboard = {
  readFindText: 'ELECTRON_BROWSER_CLIPBOARD_READ_FIND_TEXT',
  writeFindText: 'ELECTRON_BROWSER_CLIPBOARD_WRITE_FIND_TEXT'
}

export const desktopCapturer = {
  getSources: 'ELECTRON_BROWSER_DESKTOP_CAPTURER_GET_SOURCES',
  getSourcesResult: 'ELECTRON_BROWSER_DESKTOP_CAPTURER_GET_SOURCES_RESULT'
}

export const guestViewManager = {
  createGuest: 'ELECTRON_GUEST_VIEW_MANAGER_CREATE_GUEST',
  createGuestSync: 'ELECTRON_GUEST_VIEW_MANAGER_CREATE_GUEST_SYNC',
  destroyGuest: 'ELECTRON_GUEST_VIEW_MANAGER_DESTROY_GUEST',
  attachGuest: 'ELECTRON_GUEST_VIEW_MANAGER_ATTACH_GUEST',
  focusChange: 'ELECTRON_GUEST_VIEW_MANAGER_FOCUS_CHANGE',
  method: 'ELECTRON_GUEST_VIEW_MANAGER_ASYNC_CALL',
  methodSync: 'ELECTRON_GUEST_VIEW_MANAGER_SYNC_CALL'
}

export const guestWindowManager = {
  windowOpen: 'ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_OPEN',
  windowClose: 'ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_CLOSE',
  windowMethod: 'ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_METHOD',
  webContentsMethod: 'ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD',
  webContentsMethodSync: 'ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD_SYNC',
  webContentsPostMessage: 'ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_POSTMESSAGE'
}

export const navigationController = {
  goBack: 'ELECTRON_NAVIGATION_CONTROLLER_GO_BACK',
  goForward: 'ELECTRON_NAVIGATION_CONTROLLER_GO_FORWARD',
  goToOffset: 'ELECTRON_NAVIGATION_CONTROLLER_GO_TO_OFFSET',
  length: 'ELECTRON_NAVIGATION_CONTROLLER_LENGTH'
}

export const remote = {
  browser: {
    require: 'ELECTRON_BROWSER_REQUIRE',
    getBuiltin: 'ELECTRON_BROWSER_GET_BUILTIN',
    getCurrentWindow: 'ELECTRON_BROWSER_CURRENT_WINDOW',
    getCurrentWebContents: 'ELECTRON_BROWSER_CURRENT_WEB_CONTENTS',
    getGuestWebContents: 'ELECTRON_BROWSER_GUEST_WEB_CONTENTS',
    getGlobal: 'ELECTRON_BROWSER_GLOBAL',
    wrongContextError: 'ELECTRON_BROWSER_WRONG_CONTEXT_ERROR'
  },
  renderer: {
    callbackInvoke: 'ELECTRON_RENDERER_CALLBACK',
    callbackRelease: 'ELECTRON_RENDERER_RELEASE_CALLBACK'
  }
}

export const sandboxLoad = 'ELECTRON_BROWSER_SANDBOX_LOAD'
export const preloadError = 'ELECTRON_BROWSER_PRELOAD_ERROR'
